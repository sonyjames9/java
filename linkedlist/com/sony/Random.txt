
OOPS --->
-----------
Class is an template of an object
logical construct

Object is an instance of an class
physical reality -> occupies space in memory

primitive data types are not implemented as objects
- primitives are stored in stack
- objects are stored in heaps

in Java, for primitives there is no pass by reference, only pass by value

When a non primitive is final, you cannot reassign it.

Static ---
When variable is declared static, it means the variable will be related common to all the objects of the class

static variable is not part of instance, but is part of class.

static var can be accessed before any of the object of the class is being created and without referencing to the object.

Static vars dont require objects

This is why main is static - you dont need to create object of the class

You should be able to run main from a class where it is declared, without an object of the class being declared

Inside static method you cannot use anything thats not static.

Anything thats not static belongs to an object

//		if you want to access non static method greeting, you can create an object of Main class OR
//		greeting method should be declared as static

From a static method, you can access non-static methods and the opposite is not true.

EVery method eventually will be called in static method, like the main method

this keyword cannot be used in static methods

As soon as a class is run, the static elements(vars and methods) are run first.
static {} - will run once when class is executed first

Outside classes cannot be static, only inner classes can be static

A static class when declared with different objects can have different results, unlike static vars which remain the same
 for different objects.

- Inner classes are always static

Polymorphism:
1. Compile Time/Static
2. Runtime/Dynamic

Dynamic method dispatch ---

Abstraction is where you solve design level issue and
Encapsulation is where you solve implementation issue


sony.george@nuance.com
Sh!tcard@2
Sh!tcard2
SON1530842