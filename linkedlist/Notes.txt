Notes
-------------
- Draw addition and deletion of nodes in each type and you can implement

** Singly LinkedList

Arrays is not a continous memory allocation

Single Linked List None - head - nodes - tail - None
Node points to another Node

For loop to traverse to the end

Try to imagine your code representation. 
Here it's the linkedList, imagine the linkedlist, draw it draw the nodes and arrows,
. It will give an idea.

Add head and tails in your whiteboard.

Question why single linkedlist only moves ahead and not backwards?

- Then implement it
Since single linkedlist has value and reference, the pointer 
- head should always point to first node and tail to always last node

  private class Node {
    private int value;
    private Node next;

    public Node(int value) {
      this.value = value;
    }

    public Node(int value, Node next) {
      this.value = value;
      this.next = next;
    }
  }


** Doubly LinkedList

- LinkedList with pointers pointing to next and previous node.
- The first node's previous pointer will point to null
- The last node's next pointer will point to null
- If tail is not being used, then make sure you use a reference point to move to second last/last node using the while point.
- 

  private class Node {
    private int value;
    private Node next;
    private Node previous;

    public Node(int value) {
      this.value = value;
    }

    public Node(int value, Node previous, Node next) {
      this.value = value;
      this.previous = previous;
      this.next = next;
    }
  }


** Circular LinkedList

- in circular LL, the head and tail initially points to null.
- when a node is inserted the head and tail points to same node.
- 

  public void display() {
    Node node = head;
    if (head != null) {
      do {
        System.out.print(node.value);
        node = node.next;
        if (node != head)
          System.out.print(" -> ");

      }
      while (node != head);
    }
  }

	public void removeDuplicates() {
		Node node = head;

		while (node.next != null) {
			if (node.value == node.next.value) {
				node.next = node.next.next;
				size--;
			} else {
				node = node.next;
			}
		}
		tail = node;
		tail.next = null;
	}